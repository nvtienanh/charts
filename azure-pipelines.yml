# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
    name: test
jobs:
- job: no_checkout
  
  container:
    image: nvtienanh/cmake:5.0
    volumes:
      - /nfsdata:/nfsdata
      - /conan:/conan
  variables:
    # CCACHE_DIR: /nfsdata
    CONAN_USER_HOME: /conan

    # CCACHE_HARDLINK: true
  steps:
  - task: Cache@2
    displayName: Conan caching
    inputs:
      key: 'conan | "$(Agent.OS)" | **/conanfile.py'
      path: $(CONAN_USER_HOME)
      restoreKeys: | 
        conan | "$(Agent.OS)"
        conan
      cacheHitVar: CONAN_CACHE_RESTORED

  # - task: Cache@2
  #   displayName: Ccache caching
  #   inputs:
  #     key: 'ccache | "$(Agent.OS)" | $(Build.SourceVersion)'
  #     path: /nfsdata
  #     restoreKeys: | 
  #       ccache | "$(Agent.OS)"
  #     cacheHitVar: CCACHE_RESTORED

  - script: |

      df -h
      # https://github.com/ccache/ccache/wiki/File-storage
      export CCACHE_REMOTE_STORAGE=file:///nfsdata
      export CCACHE_RESHARE=true
      # cmake -B build -G Ninja -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      # cmake --build ./build
      conan profile detect
      conan install . --output-folder=build --build=missing
      
      # # cmake -B build -G Ninja
      cmake -B build -G Ninja -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCCACHE_REMOTE_STORAGE=file:///nfsdata
      cmake --build ./build
    displayName: 'Run cmake'



# - job: checkout
#   dependsOn: no_checkout

#   container:
#     image: nvtienanh/cmake:5.0
#     volumes:
#       - /temcache:/temcache
#       - /blobfuse2:/blobfuse2
#   steps:
#   - checkout: none
#   - script: |
#       ls -la /temcache
#       azcopy --version
#   condition: always()
#   displayName: 'Run cmake'


