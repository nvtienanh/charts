# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
    name: test
jobs:
- job: no_checkout
  
  container:
    image: nvtienanh/cmake:5.0
    volumes:
      - /nfsdata:/nfsdata
      - /conan:/conan
  # variables:
  #   # CCACHE_DIR: /nfsdata
  #   CONAN_USER_HOME: /conan

    # CCACHE_HARDLINK: true
  steps:
  - task: Cache@2
    displayName: Conan caching
    inputs:
      key: 'blobstorage | conan | "$(Agent.OS)" | conanfile.py'
      path: $(Pipeline.Workspace)/s/.cache/conan
      restoreKeys: | 
        blobstorage | conan | "$(Agent.OS)"
      cacheHitVar: CONAN_CACHE_RESTORED

  # - task: Cache@2
  #   displayName: Ccache caching
  #   inputs:
  #     key: 'ccache | "$(Agent.OS)" | $(Build.SourceVersion)'
  #     path: /nfsdata
  #     restoreKeys: | 
  #       ccache | "$(Agent.OS)"
  #     cacheHitVar: CCACHE_RESTORED

  - script: |

      SourceBranch=$(sed 's/\//_/g' <<<"$(Build.SourceBranch)")
      md5=($(md5sum $(Pipeline.Workspace)/s/.cache/conan/conan.lock))
      cache_file="/conan/$(System.TeamProjectId)/$(System.DefinitionId)/$SourceBranch/$md5.tar.gz"
      echo $cache_file
      if test -f $cache_file; then
        echo "File exists."
        tar -xzf $cache_file -C /
      else
        echo "File not exists."
      fi
      echo "##vso[task.setvariable variable=cache_file;]$cache_file"

    displayName: Conan cache restore
    condition: and(not(canceled()), eq(variables.CONAN_CACHE_RESTORED, 'true'))

  - script: |
      echo "$(cache_file)"
      conan profile new default --detect
      conan profile update settings.compiler.libcxx=libstdc++11 default
      
      conan install . --output-folder=build --build=missing
      conan lock create conanfile.py
      # # cmake -B build -G Ninja
      # cmake -B build -G Ninja
      # cmake --build ./build
    displayName: 'Run cmake'
    env:
      CCACHE_DIR: /nfsdata

  # - script: |
  #     ccache -s
  #   displayName: 'Run ccache -s'
  #   env:
  #     CCACHE_DIR: /nfsdata
  
  - script: |
      cp $(Pipeline.Workspace)/s/.cache/conan/conan.lock $(conan config get storage.path)
      tar -czf "$(cache_file)" $(conan config get storage.path)

    displayName: Pack conan cache
    condition: and(not(canceled()), not(failed()), ne(variables.CONAN_CACHE_RESTORED, 'true'))


# https://github.com/microsoft/azure-pipelines-tasks/issues/10925
# - job: checkout
#   dependsOn: no_checkout

#   container:
#     image: nvtienanh/cmake:5.0
#     volumes:
#       - /temcache:/temcache
#       - /blobfuse2:/blobfuse2
#   steps:
#   - checkout: none
#   - script: |
#       ls -la /temcache
#       azcopy --version
#   condition: always()
#   displayName: 'Run cmake'


